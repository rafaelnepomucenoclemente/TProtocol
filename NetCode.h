#pragma once

#define TSTART_D_PORTAL_ID					((WORD) 15001)
#define TSTART_C_PORTAL_ID					((WORD) 15002)
#define TSTART_B_PORTAL_ID					((WORD) 15006)
#define TSTART_P_PORTAL_ID					((WORD) 15003)

#define BROA_BASELEVEL					80
#define WARCOUNTRY_MAXGAP				5
#define CHOICE_COUNTRY_LEVEL			9
#define WARBALANCE_BASECOUNT			10

#define TOURNAMENT_CANTUSESKILL			233 // Skill ID
#define TOURNAMENT_CANTUSEITEM_HP		42 // Item Kind
#define TOURNAMENT_CANTUSEITEM_MP		43  // Item Kind
#define TOURNAMENT_CANTUSEITEM_ID		6818 // Item ID
#define TOURNAMENT_CANTUSEITEM_ID2		7688 // Item ID
#define TOURNAMENT_CANTUSEITEM_SKILLVALUE	1016 // Item value

#define MAX_APEXPACKET			(2048)

#define MAX_NAME				(50)
#define MAX_BOARD_TITLE			(256)
#define MAX_BOARD_MSG			(1024)
#define MAX_BOARD_TEXT			(2048)

#define TMAX_LEVEL			((BYTE) 101)
#define TMAX_ITEMLEVELDOWN	((BYTE) 9)

#define MOVE_NONE			((WORD) 1800)
#define TREVIVAL_SKILL		((WORD) 800)
#define TBLOCK_SKILL		((WORD) 801)
#define TAVOID_SKILL		((WORD) 802)
#define TBATTLE_SKILL		((WORD) 803)
#define TSTORE_SKILL		((WORD) 804)
#define TBLOCKRIDE_SKILL	((WORD) 805)
#define TPCBANG_SKILL		((WORD) 903)

#define UNIT_SIZE			(1024)
#define CELL_SIZE			(64)

#define INVEN_DEFAULT		((BYTE) 0xFF)
#define INVEN_EQUIP			((BYTE) 0xFE)
#define INVEN_TRANS			((BYTE) 0xFD)
#define INVEN_NULL			((BYTE) 0xFC)

#define INVALID_SLOT		((BYTE) 0xFF)
#define TMAGIC_MAX			((BYTE) 6)

#define MONEY_MULTIPLY		((DWORD)1000)

#define MAX_HOTKEY_INVEN	((BYTE) 10)
#define MAX_HOTKEY_POS		((BYTE) 12)
#define MAX_APPLICANT		((BYTE)100)
#define MAX_POST_COUNT		((BYTE)	20)
#define MAX_PET_COUNT		((BYTE) 10)

#define GUILD_LEAVE_DURATION	((DWORD)0) //5일
#define GUILD_DIS_DURATION		((DWORD)0) //10일
#define GUILD_EXTINC_DURATION	((DWORD)86400*7) //7일

#define SOULMATE_SILENCE_DURATION	((DWORD)86400) //1일

#define GUILD_MEMBER_MAX			((BYTE) 30)
#define GUILD_ESTABLISH_LEVEL		((BYTE) 20)
#define MAX_GUILD_LEVEL				((BYTE) 10)
#define MAX_GUILD_VOLUNTEER			((BYTE) 100)
#define MAX_GUILD_PEER_COUNT		((BYTE) 5)
#define MAX_GUILD_ARTICLE_COUNT		((BYTE) 100)
#define MAX_GUILD_CONTRIBUTION		((__int64) (MONEY_MULTIPLY * MONEY_MULTIPLY))
#define MIN_GUILD_CONTRIBUTION		((__int64) (MONEY_MULTIPLY))

#define PET_LIVE_DURATION	((DWORD)86400*7) //7일

#define POST_DURATION		(86400*3)		//3일
#define DAY_ONE				(86400)
#define HOUR_ONE			(3600)
#define WEEK_ONE			(604800)

#define LOTTERY_TIME		15000

#define POST_COST_NORMAL	((DWORD) 100)
#define POST_COST_PACKAGE	((DWORD) 300)
#define POST_COST_BILLS		((DWORD) 900)
#define POST_COST_RETURN	((DWORD) 0)
#define POST_COST_PAYMENT	((DWORD) 0)
#define POST_COST_NPC		((DWORD) 0)
#define POST_COST_OPERATOR	((DWORD) 0)
#define POST_COST_CASH		((DWORD) 0)

#define CABINET_STORAGE_MAX	((BYTE) 16)

#define CABINET_COST_OPEN1	((DWORD) 0)
#define CABINET_COST_OPEN2	((DWORD) 10000)
#define CABINET_COST_OPEN3	((DWORD) 1000000)

#define CABINET_COST_USE1	((DWORD) 100)
#define CABINET_COST_USE2	((DWORD) 100)
#define CABINET_COST_USE3	((DWORD) 300)

#define NAME_NULL							_T("")
#define NAME_MASK							_T("^.^;;")

#define DUEL_TIME			(60*5)					// 5분
#define DUEL_STANDBY_TIME	(10)					// 10초
#define DUEL_AREAOUT_TIME	8						// 8초
#define DUEL_AREARANGE		40.0f

#define	PCBANG_NONE			((BYTE)0)
#define	PCBANG_REAL			((BYTE)1)
#define	PCBANG_PREMIUM1		((BYTE)2)
#define	PCBANG_PREMIUM2		((BYTE)4)

#define ITEMGROUP_COUNT			20

#define PVP_TOTAL						1
#define PVP_USEABLE						2

#define MIN_GRADE_EFFECT_LEVEL			17

#define	MONTHRANKCOUNT					33
#define FAMERANKCOUNT					9
#define MONTHCOUNT						13
#define FIRSTGRADEGROUPCOUNT			17
#define TOTALMONTHRANKCOUNT				(FIRSTGRADEGROUPCOUNT*3)

#define MAX_POST						30

#define TOURNAMENT_SLOT					(8)
#define TOURNAMENT_BASEPRIZE			(100)

#define FIRST_MAP_TOURNAMENT			500
#define LAST_MAP_TOURNAMENT				532
#define TUTORIAL_MAPID					2010
#define MEETING_MAPID					1100
#define MEETING_SROOM_COUNT				5
#define SKYGARDEN_MAPID					2200

inline void CalcMoney(INT64 dlMoney, DWORD & dwGold, DWORD & dwSilver, DWORD & dwCooper)
{
	dwCooper = DWORD(dlMoney % MONEY_MULTIPLY);
	dwSilver = DWORD((dlMoney / MONEY_MULTIPLY) % MONEY_MULTIPLY);
	dwGold = DWORD(dlMoney / MONEY_MULTIPLY / MONEY_MULTIPLY);
}

inline INT64 CalcMoney(DWORD dwGold, DWORD dwSilver, DWORD dwCopper)
{
	return dwCopper + dwSilver * MONEY_MULTIPLY + __int64(dwGold) * MONEY_MULTIPLY * MONEY_MULTIPLY; 
}

typedef enum GAMBLE_RESULT
{
	GAMBLE_SUCCESS = 0,
	GAMBLE_INVALIDITEM,
	GAMBEL_NEEDMONEY,
	GAMBLE_FAIL,					//주술실패
	GAMBLE_REPFAIL,					//치환실패
	GAMBLE_FULLINVEN,
	GAMBLE_INVALIDPOS
} *LPGAMBLE_RESULT;

typedef enum CASHSHOP_RESULT
{
	CASHSHOP_SUCCESS = 0,
	CASHSHOP_INVENFULL,
	CASHSHOP_NOCASHINFO,
	CASHSHOP_NEEDCASH,
	CASHSHOP_NOTARGET,
	CASHSHOP_NOTFOUND,
	CASHSHOP_MAXCOUNT,
	CASHSHOP_NEEDEXTEND,
	CASHSHOP_INTERNAL
} *LPCASHITEM_RESULT;

typedef enum ASK_RESULT
{
	ASK_YES = 0,	// 승낙
	ASK_NO,			// 거절
	ASK_BUSY		// 다른용무중
} * LPASK_RESULT;

typedef enum SMS_RESULT
{
	SMS_SUCCESS = 0,
	SMS_NOINVEN,
	SMS_NOITEM,
	SMS_NOGUILD,
	SMS_NOTARGET,
	SMS_INVALIDITEM,
	SMS_NOTMYGUILD,
	SMS_INTERNAL
};

typedef enum DUEL_RESULT
{
	DUEL_SUCCESS = 0,
	DUEL_REFUSE, 
	DUEL_BUSY, // 다른용무중
	DUEL_FAIL
};

typedef enum TCHGCHANNEL_RESULT
{
	CHC_SUCCESS = 0,
	CHC_SAMECHANNEL,
	CHC_NOCHANNEL
} *LPCHGCHANNEL_RESULT;

typedef enum TTELEPORT_RESULT
{
	TPR_SUCCESS = 0,
	TPR_NOTTELEPORTNPC,
	TPR_NOPORTAL,
	TPR_NODESTINATION,
	TPR_NEEDMONEY,
	TPR_NOITEM,
	TPR_INVALID,
	TPR_USED,
	TPR_CHANNEL
} *LPTTELEPORT_RESULT;

typedef enum TLOGIN_RESULT
{
	LR_SUCCESS = 0,
	LR_NOUSER,
	LR_INVALIDPASSWD,
	LR_DUPLICATE,
	LR_VERSION,
	LR_INTERNAL,
	LR_BLOCK,
	LR_IPBLOCK,			//	Duke Kim 2007.04.03	 Need the Client Work
	LR_NEEDAGREEMENT,
	LR_NEEDWORLDUNIFY,
	LR_COUNT
} *LPTLOGIN_RESULT;

typedef enum TCREATECHAR_RESULT
{
	CR_SUCCESS = 0,
	CR_NOGROUP,
	CR_DUPNAME,
	CR_INVALIDSLOT,
	CR_PROTECTED,
	CR_OVERCHAR,
	CR_NEEDCARD,
	CR_INTERNAL,
	CR_COUNT
} *LPTCREATECHAR_RESULT;


typedef enum TDELCHAR_RESULT
{
	DR_SUCCESS = 0,
	DR_INVALIDPASSWD,
	DR_NOGROUP,
	DR_INTERNAL,
	DR_GUILD,
	DR_COUNT
} *LPTDELCHAR_RESULT;


typedef enum TSTART_RESULT
{
	SR_SUCCESS = 0,
	SR_NOSERVER,
	SR_NOGROUP,
	SR_INTERNAL,
	SR_COUNT
} *LPTSTART_RESULT;


typedef enum TCONNECT_RESULT
{
	CN_SUCCESS = 0,
	CN_NOCHANNEL,
	CN_NOCHAR,
	CN_ALREADYEXIST,
	CN_INVALIDVER,
	CN_INTERNAL,
	CN_COUNT
} *LPTCONNECT_RESULT;


typedef enum TMOVEITEM_RESULT
{
	MI_SUCCESS = 0,
	MI_NODESTINVEN,
	MI_NOSRCINVEN,
	MI_NOSRCITEM,
	MI_SAMEPOS,
	MI_CANNOTEQUIP,
	MI_INVENFULL,
	MI_DEALING,
	MI_BOTHHANDWEAPON,
	MI_NOSKILL,
	MI_NOMATCHCLASS,
	MI_LOWLEVEL,
	MI_BLOCK,
	MI_DEAD,
	MI_CANTDROP,
	MI_WRAP,
	MI_COUNT
} *LPTMOVEITEM_RESULT;

typedef enum TSKILL_RESULT
{
	SKILL_SUCCESS = 0,
	SKILL_NOTFOUND,
	SKILL_ALREADY,
	SKILL_NEEDPARENT,
	SKILL_NEEDMONEY,
	SKILL_NEEDLEVELUP,
	SKILL_SPEEDYUSE,
	SKILL_NEEDMP,
	SKILL_NEEDHP,
	SKILL_UNSUITWEAPON,
	SKILL_NEEDPREVACT,
	SKILL_MATCHCLASS,
	SKILL_NEEDSKILLPOINT,
	SKILL_WRONGTARGET,
	SKILL_TOOCLOSE,
	SKILL_TOOFAR,
	SKILL_WRONGDIR,
	SKILL_WRONGREGION,
	SKILL_NEEDGROUND,
	SKILL_TRANS,
	SKILL_HIDE,
	SKILL_STUN,
	SKILL_DEAD,
	SKILL_SILENCE,
	SKILL_MODE,
	SKILL_PEACEZONE,
	SKILL_NOTARGET,
	SKILL_NOTMOVESKILL,
	SKILL_ACTIONLOCK,
	SKILL_NEEDITEM, // 스킬초기화
	SKILL_HAVECHILD,
	SKILL_NOTINIT,
	SKILL_CANNOTSEE,
	SKILL_COUNT
} *LPTSKILL_RESULT;

typedef enum TPARTY_RESULT
{
	PARTY_AGREE = 0,
	PARTY_DENY,
	PARTY_BUSY, // 다른용무중
	PARTY_NOUSER,	// 자신이 초대를 했을때.
	PARTY_NOREQUSER,	// 초대를 받았을때.
	PARTY_WAITERS,
	PARTY_ALREADY,
	PARTY_FULL,
	PARTY_NOTCHIEF,
	PARTY_NOPARTY,
	PARTY_CHGCHIEF,
	PARTY_COUNTRY
} *LPTPARTY_RESULT;

typedef enum TITEMUSE_RESULT
{
	IU_SUCCESS = 0,
	IU_NOTFOUND,
	IU_NEEDTIME,
	IU_FULL,
	IU_NEEDLEVEL,
	IU_DEALING,
	IU_RIDING,
	IU_NOTPARTY,
	IU_NOTPARTYFOUND,
	IU_TARGETNOTFOUND,
	IU_TARGETBUSY,
	IU_TARGETDENY,
	IU_OVERLAPPREMIUM,
	IU_OVERLAPEXPBONUS,
	IU_WRAPPING, //밀봉되어 있은 아이템은 사용할 수 없음. 0319
	IU_ARENA
} *LPTITEMUSE_RESULT;
//	Quest result
typedef enum TQUEST_RESULT
{
	QR_SUCCESS=0,
    QR_TERM,
    QR_INVENTORYFULL,
	QR_DROP
} *LPTQUEST_RESULT;

typedef enum TGUILD_RESULT
{
	GUILD_SUCCESS = 0,
	GUILD_JOIN_DENY,
	GUILD_JOIN_BUSY, // 다른용무중
	GUILD_FAIL,
	GUILD_ALREADYGUILDNAME,
	GUILD_NOTCHIEF,
	GUILD_ALREADYMEMBER,
	GUILD_NOTMEMBER,
	GUILD_HAVEGUILD,
	GUILD_NOTFOUND,
	GUILD_ESTABLISH_ERR,
	GUILD_DISORGANIZATION_ERR,
	GUILD_LEAVE_SELF,
	GUILD_LEAVE_KICK,
	GUILD_LEAVE_DISORGANIZATION,
	GUILD_JOIN_SUCCESS,
	GUILD_NODUTY,
	GUILD_MEMBER_FULL,
	GUILD_MISMATCHLEVEL,
	GUILD_SAMEGUILDTACTICS,
	GUILD_NOMONEY,
	GUILD_NOPOINT,
	GUILD_MAXWANTED,
	GUILD_WANTEDEND,
	GUILD_AREADYAPPLY,
	GUILD_SAME
} *LPTGUILD_RESULT;

typedef enum TGUILD_CABINET_RESULT
{
	GUILD_CABINET_SUCCESS = 0,
	GUILD_CABINET_FAIL,
	GUILD_CABINET_FULL,
	GUILD_CABINET_ITEMNOTFOUND,
	GUILD_CABINET_INVENFULL,
	GUILD_CABINET_LEVEL,
	GUILD_CABINET_NOTDUTY
} *LPTGUILD_CABINET_RESULT;

typedef enum TGUILD_CONTRIBUTION_RESULT
{
	GUILD_CONTRIBUTION_SUCCESS = 0,
	GUILD_CONTRIBUTION_NOTENOUGH,
	GUILD_CONTRIBUTION_MAXGUILDLEVEL,
	GUILD_CONTRIBUTION_NOTMEMBER
} *LPTGUILD_CONTRIBUTION_RESULT;

typedef enum TCHANGEMAP_RESULT
{
	CHGMAP_SUCCESS = 0,
	CHGMAP_NOTFOUND
} *LPTCHANGEMAP_RESULT;

typedef enum TITEMBUY_RESULT
{
	ITEMBUY_SUCCESS = 0,
	ITEMBUY_NOTFOUND,
	ITEMBUY_NEEDMONEY,
	ITEMBUY_CANTPUSH,
	ITEMBUY_DEALING,
	ITEMBUY_NPCCALLERROR,
	ITEMBUY_INVALIDPOS
} *LPTITEMBUY_RESULT;

typedef enum TITEMSELL_RESULT
{
	ITEMSELL_SUCCESS = 0,
	ITEMSELL_NOTFOUND,
	ITEMSELL_DEALING,
	ITEMSELL_CANTSELL,
	ITEMSELL_NPCCALLERROR,
	ITEMSELL_INVALIDPOS
} *LPTITEMSELL_RESULT;

typedef enum MONITEMTAKE_RESULT
{
	MIT_SUCCESS = 0,
	MIT_FULLINVEN,
	MIT_NOTFOUND,
	MIT_AUTHORITY,
	MIT_DEALING,
	MIT_LOTTERY
} *LPMONITEMTAKE_RESULT;

typedef enum MONITEMLIST_RESULT
{
	MIL_SUCCESS = 0,
	MIL_CANTACCESS
} *LPMONITEMLIST_RESULT;

typedef enum PROTECTED_RESULT
{
	PROTECTED_SUCCESS = 0,
	PROTECTED_NOTFOUND,
	PROTECTED_ALREADY,
	PROTECTED_FAIL
} *LPPROTECTED_RESULT;

typedef enum FRIEND_RESULT
{
	FRIEND_SUCCESS = 0,
	FRIEND_REFUSE,
	FRINED_BUSY, // 다른용무중
	FRIEND_NOTFOUND,
	FRIEND_ALREADY,
	FRIEND_MAX
} *LPFRIEND_RESULT;

typedef enum FRIEND_TYPE
{
	FT_FRIEND = 0,
	FT_TARGET,
	FT_FRIENDFRIEND
} *LPFRIEND_TYPE;

typedef enum FRIEND_CONNECTION
{
	FRIEND_CONNECTION = 0,
	FRIEND_DISCONNECTION
} *LPFRIEND_CONNECTION;

typedef enum LOCCUPY_RESULT
{
	LOCCUPY_SUCCESS = 0,
	LOCCUPY_INTERNAL,
	LOCCUPY_FULL
} *LPLOCCUPY_RESULT;

typedef enum CASTLE_RESULT
{
	CASTLE_SUCCESS = 0,
	CASTLE_INTERNAL
} *LPCASTLE_RESULT;

typedef enum ITEMUPGRADE_RESULT
{
	ITEMUPGRADE_SUCCESS = 0,
	ITEMUPGREAD_NOITEM,
	ITEMUPGREAD_NOGRADE,
	ITEMUPGRADE_FAIL,
	ITEMUPGRADE_MONEY,
	ITEMUPGRADE_NPCCALLERROR,
	ITEMUPGRADE_INVALIDPOS,
	ITEMUPGRADE_GEM_SUCCESS,
	ITEMUPGRADE_GEM_FAIL,
	ITEMUPGRADE_NOGEM,
	ITEMUPGRADE_MAGICFAIL,
	ITEMUPGRADE_SUCCESS_MAGICCLEAR,
	ITEMUPGRADE_SUCCESS_WRAP,
	ITEMUPGRADE_SUCCESS_ELD,
	ITEMUPGRADE_WRAPPING,	//밀봉할 수 없는 아이템 0319
	ITEMUPGRADE_MAXELD,		//더이상 착용레벨을 다운할 수 없음	0319
	ITEMUPGRADE_NOREFINE,	//제련되어 있지 않음
	ITEMUPGRADE_NOGRADEEFFECT,	//강화 이펙트 없음
	ITEMUPGRADE_SUCCESS_CLEARREFINE,
	ITEMUPGRADE_SUCCESS_CHANGEEFFECT,
	ITEMUPGRADE_SAMECOLOR,			//090922
	ITEMUPGRADE_SUCCESS_COLOR,
	ITEMUPGRADE_DOWNGRADE,
	ITEMUPGRADE_GEM_FAIL_BLUE,
	ITEMUPGRADE_TRANS_SUCCESS,
	ITEMUPGRADE_TRANSRES_SUCCESS
} *LPITEMUPGRADE_RESULT;

typedef enum CORPS_RESULT
{
	CORPS_SUCCESS = 0,
	CORPS_DENY,
	CORPS_BUSY, // 다른용무중
	CORPS_NO_PARTY,
	CORPS_NOT_COMMANDER,
	CORPS_WRONG_TARGET,
	CORPS_TARGET_NO_PARTY,
	CORPS_ALREADY,
	CORPS_CHGCOMMANDER,
	CORPS_DEAD,
	CORPS_MAX_PARTY
} *LPCORPS_RESULT;

typedef enum CABINET_RESULT
{
	CABINET_SUCCESS = 0,
	CABINET_NOTUSE,
	CABINET_NEEDMONEY,
	CABINET_ALREADY,
	CABINET_FULL,
	CABINET_NPCCALLERROR,
	CABINET_INVALIDPOS,
	CABINET_MAX
};

typedef enum POST_RESULT
{
	POST_SUCCESS = 0,
	POST_NORECEIVER,
	POST_NOITEM,
	POST_NEEDMONEY,
	POST_NEEDITEM,
	POST_NOTITLE,
	POST_FULL,
	POST_INVENFULL,
	POST_NOTFOUND,
	POST_NOTBILLS,
	POST_NEEDSETTLE,
	POST_INTERNAL,
	POST_NOTDEAL,
	POST_MAXLENGTH,
	POST_SAMEACCOUNT
};

typedef enum CASTLEAPPLY_RESULT
{
	CBS_SUCCESS = 0,
	CBS_FULL,
	CBS_NOTFOUND,
	CBS_NOTREADY,
	CBS_CANTAPPLY
};

typedef enum INVEN_RESULT
{
	INVEN_SUCCESS = 0,
	INVEN_EXIST,
	INVEN_NOTEMPTY,
	INVEN_FULL,
	INVEN_LEVEL,
	INVEN_FAIL
};

typedef enum SWITCH_RESULT
{
	SWITCH_SUCCESS = 0,
	SWITCH_OPEN,
	SWITCH_CLOSED,
	SWITCH_NOTCONTROL
};

typedef enum DEALITEM_RESULT
{
	DEALITEM_SUCCESS,
	DEALITEM_DENY,
	DEALITEM_BUSY, // 다른용무중
	DEALITEM_NOTARGET,
	DEALITEM_DEALING,
	DEALITEM_CANCEL,
	DEALITEM_NOMONEY,
	DEALITEM_OVERMONEY,
	DEALITEM_NOINVEN,
	DEALITEM_NOITEM,
	DEALITEM_INVALIDITEM,
	DEALITEM_ENEMY,
	DEALITEM_CANTRECV,
	DEALITEM_CANTDEAL
};

typedef enum STORE_RESULT
{
	STORE_SUCCESS = 0,
	STORE_FAIL,
	STORE_ITEM_NOITEM,
    STORE_ITEM_NOTDEAL,
	STORE_ITEM_OVERMONEY,
	STORE_ITEM_NEEDMONEY,
	STORE_ITEM_NOITEMCOUNT,
	STORE_ITEM_INVENFULL
};

typedef enum PET_RESULT
{
    PET_SUCCESS = 0,
	PET_FAIL,
	PET_NOTITEM,
	PET_NOTFOUND,
	PET_FULL,
	PET_USETIME,
	PET_CANTUSE
};

typedef enum SOULMATE_RESULT
{
    SOULMATE_SUCCESS = 0,
	SOULMATE_FAIL,
	SOULMATE_SILENCE,
	SOULMATE_NOTFOUND,
	SOULMATE_NEEDMONEY,
	SOULMATE_ALREADY,
	SOULMATE_NPCCALLERROR,
	SOULMATE_INVALIDPOS
};

typedef enum ITEMREPAIR_RESULT
{
	ITEMREPAIR_SUCCESS = 0,
	ITEMREPAIR_NOTFOUND,
	ITEMREPAIR_NEEDMONEY,
	ITEMREPAIR_DISALLOW,
	ITEMREPAIR_MAXREFINE,
	ITEMREPAIR_LEVELDIFF,
	ITEMREPAIR_FAIL,
	ITEMREPAIR_NPCCALLERROR,
	ITEMREPAIR_INVALIDPOS
};

typedef enum CHANGECHARBASE_RESULT
{
	CCB_SUCCESS = 0,
	CCB_DUPLICATE,
	CCB_NOITEM,
	CCB_TIME,
	CCB_PARTY,	//파티구성중에는 할수없음
	CCB_TACTICS,//용병지원상태에서는 할수없음
	CCB_GUILD,	//길드가입중에는 할 수 없음
	CCB_BALANCE,//
	CCB_LEVEL,	//레벨 미달
	CCB_FAIL
};

typedef enum STOPTHECLOCK_RESULT
{
	STC_SUCCESS = 0,
	STC_NEEDCASH,
	STC_FAIL
};

typedef enum HEROSELECT_RESULT
{
	HSR_SUCCESS = 0,
	HSR_INTERNAL,		// 쿼리 실행 실패
	HSR_INVALIDCHAR,	// 존재하지 않는 캐릭터
	HSR_INVALIDZONE,	// 존재하지 않는 지역
	HSR_SAMENAME,		// 영웅 중복 지정
	HSR_NOAUTHORITY,	// 권한 없음
	HSR_BATTLETIME,		// 전쟁 시간
	HSR_HEROEXIST,		// 영웅이 이미 지정되었음
	HSR_NULLNAME		// 영웅 무효화 없음.
};
	
typedef enum GUILDPOINTREWARD_RESULT
{
	GPR_SUCCESS = 0,
	GPR_NEEDPOINT,
	GPR_NOMEMBER
};

typedef enum MONSTERBUY_RESULT
{
	MSB_SUCCESS = 0,
	MSB_INVALIDNPC,
	MSB_NOTFOUND,
	MSB_NEEDMONEY,
	MSB_CAMPMISMATCH,
	MSB_AUTHORITY,
	MSB_ALREADY
};

typedef enum ITEMCHANGE_RESULT	//0319
{
	ITEMCHANGE_SUCCESS = 0,		//성공
	ITEMCHANGE_FAIL,			//실패
	ITEMCHANGE_INVALID,			//유효하지않은 아이템
	ITEMCHANGE_STATUS,			//아이템을 사용할 수 없는 상태
	ITEMCHANGE_FULL				//가방 꽉참
};

typedef enum WASTEREFINE_RESULT
{
	WASTEREFINE_SUCCESS = 0,
	WASTEREFINE_NOTFOUND,
	WASTEREFINE_NOREFINE,
	WASTEREFINE_FULLINVEN
};

typedef enum CHATBAN_RESULT
{
	CHATBAN_SUCCESS = 0,
	CHATBAN_NOTOPERATOR,
	CHATBAN_INVALIDCHAR,
	CHATBAN_MAXMIN
};

typedef enum TOURNAMENT_RESULT
{
	TOURNAMENT_SUCCESS = 0,
	TOURNAMENT_DISQUALIFY,		//1클래스 자격미달
	TOURNAMENT_TIMEOUT,			//진행시간 아님
	TOURNAMENT_ALREADYREG,		//이미 등록되어있습니다.
	TOURNAMENT_NOTFOUND,		//대상을 찾을 수 없습니다.
	TOURNAMENT_FULL,			//정원을 초과했습니다.
	TOURNAMENT_CLASS,			//지원할 수 없는 직업입니다.
	TOURNAMENT_MONEY,			//돈이 부족합니다.
	TOURNAMENT_ITEM,			//필요아이템(허가서) 부족.
	TOURNAMENT_LEVEL,			//허용 레벨을 초과하였습니다.
	TOURNAMENT_FAIL
};

typedef enum RPSGAME_RESULT
{
	RPS_SUCCESS = 0,
	RPS_INGAME,
	RPS_NODATA,
	RPS_NEEDITEM
};

typedef enum MEETING_RESULT
{
	MTR_SUCCESS = 0,
	MTR_DENY, //초대 거절
	MTR_BUSY, //응답 불가
	MTR_NOTARGET, //대상없음
	MTR_NOTCHIEF, //권한없음
	MTR_INROOM //입장중
};

typedef enum ARENA_RESULT
{
	ARENA_SUCCESS = 0,
	ARENA_FAIL,
	ARENA_MONEY,//돈없다
	ARENA_FULL,//진행중...자리없다
	ARENA_CHIEF,//파티장만 신청가능
	ARENA_MAXPARTY,//입장 최대인원 초과
	ARENA_MINPARTY,//입장 최소인원 미달
	ARENA_CHANNEL
};

typedef enum CMGIFT_RESULT
{
	CMGIFT_SUCCESS = 0,
	CMGIFT_TARGET,
	CMGIFT_ID,
	CMGIFT_DUPLICATE,
	CMGIFT_ERRPOST,
	CMGIFT_FAIL	
};
////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////  TYPE DEFINE	/////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
typedef enum NATION_TYPE
{
	NATION_NONE = 0,
	NATION_KOREA,
	NATION_GERMAN,
	NATION_US,
	NATION_JAPAN,
	NATION_TAIWAN,
	NATION_RUSSIA
} *LPTNATION_TYPE;

typedef enum TSVR_TYPE
{
	SVR_NONE = 0,
	SVR_CONTROL,
	SVR_LOGIN,
	SVR_WORLD,
	SVR_MAP,
	SVR_RELAY,
	SVR_KICK,
	SVR_COUNT
} *LPTSVR_TYPE;

typedef enum TGROUP_TYPE
{
	GROUPT_NORMAL = 0,
	GROUPT_BATTLE,
	GROUPT_COUNT
} *LPTGROUP_TYPE;

typedef enum TSVR_STATUS
{
	TSVR_STATUS_DISABLE = 0,
	TSVR_STATUS_ENABLE,
	TSVR_STATUS_SLEEP,
	TSVR_STATUS_COUNT
} *LPTSVR_STATUS;

typedef enum TSTATUS_TYPE
{
	TSTATUS_SLEEP = 0,
	TSTATUS_NORMAL,
	TSTATUS_BUSY,
	TSTATUS_FULL,
	TSTATUS_COUNT
} *LPTSTATUS_TYPE;

typedef enum TKEY_DIR
{
	TKDIR_LF,
	TKDIR_F,
	TKDIR_RF,
	TKDIR_L,
	TKDIR_N,
	TKDIR_R,
	TKDIR_LB,
	TKDIR_B,
	TKDIR_RB,
	TKDIR_COUNT
} *LPTKEY_DIR;


typedef enum TACTION_TYPE
{
	TA_STAND = 0,
	TA_TURN_LEFT,
	TA_TURN_RIGHT,
	TA_WALK,
	TA_RUN,
	TA_BACK,
	TA_DIE,
	TA_DEAD,
	TA_GETAWAY,
	TA_FOLLOW,
	TA_JUMP,
	TA_FLY,
	TA_LAND,
	TA_FALL,
	TA_PUSHSTART,
	TA_PUSH,
	TA_DOWN,
	TA_STUN,
	TA_HOLD,
	TA_SWIMSTAND,
	TA_SWIMMOVE,
	TA_SWIMBACK,
	TA_SIT,
	TA_SITDOWN,
	TA_STANDUP,
	TA_SPAWN,
	TA_LOOT_START,
	TA_LOOT,
	TA_LOOT_END,
	TA_HI,
	TA_BOW,
	TA_SALUTE,
	TA_STRETCH,
	TA_LAUGH,
	TA_CRY,
	TA_RUDE,
	TA_KNEEL_START,
	TA_KNEEL,
	TA_KNEEL_END,
	TA_CHEER,
	TA_SHOUT,
	TA_APPLAUD,
	TA_POINT,
	TA_BEG,
	TA_QUESTION,
	TA_YES,
	TA_NO,
	TA_RIDING,
	TA_DEFEND = 56,
	TA_COUNT = 255
} *LPTACTION_TYPE;


typedef enum TMODE_TYPE
{
	MT_NORMAL = 0,
	MT_BATTLE,
	MT_GOHOME,
	MT_COUNT
} *LPTMODE_TYPE;


typedef enum OBJ_TYPE
{
	OT_NONE = 0,
	OT_PC,
	OT_MON,
	OT_NPC,
	OT_FOG,
	OT_WATER,
	OT_COLLISION,
	OT_RECALL,
	OT_BSP,
	OT_SWITCH,
	OT_GATE,
	OT_SELF,
	OT_SILHOUETTE,
	OT_PATHWALL,
	OT_GODTOWER,
	OT_GODBALL,
	OT_LAVA,
	OT_WHATEVER,
	OT_COUNT
} *LPOBJ_TYPE;


typedef enum HIT_TYPE
{
	HT_MISS = 0,
	HT_NORMAL,
	HT_CRITICAL,
	HT_BLOCK,
	HT_LASTHIT,
	HT_COUNT
} *LPHIT_TYPE;


typedef enum EQUIP_SLOT
{
	ES_PRMWEAPON = 0,
	ES_SNDWEAPON,
	ES_LONGWEAPON,
	ES_HEAD,
	ES_BACK,
	ES_BODY,
	ES_PANTS,
	ES_FOOT,
	ES_HAND,
	ES_NECK,
	ES_LFINGER,
	ES_RFINGER,
	ES_LEAR,
	ES_REAR,
	ES_FACE,
	ES_COSTUME_HAT,
	ES_COSTUME_DRESS,
	ES_COSTUME_ACCESSORY,
	ES_COSTUME_RACE,
	ES_COUNT
} *LPEQUIP_SLOT;


typedef enum TCONTRY_TYPE
{
	TCONTRY_D = 0,
	TCONTRY_C,
	TCONTRY_B,
	TCONTRY_N,
	TCONTRY_PEACE,
	TCONTRY_COUNT
} *LPTCONTRY_TYPE;


typedef enum TCLASS_TYPE
{
	TCLASS_WARRIOR = 0,
	TCLASS_RANGER,
	TCLASS_ARCHER,
	TCLASS_WIZARD,
	TCLASS_PRIEST,
	TCLASS_SORCERER,
	TCLASS_COUNT
} *LPTCLASS_TYPE;


typedef enum TRACE_TYPE
{
	TRACE_HUMAN = 0,
	TRACE_BEAST,
	TRACE_NYMPH,
	TRACE_MONELF,
	TRACE_MONHIGH,
	TRACE_MONMAN,
	TRACE_COUNT
} *LPTRACE_TYPE;


typedef enum TSEX_TYPE
{
	TSEX_MAN = 0,
	TSEX_WOMAN,
	TSEX_COUNT
} *LPTSEX_TYPE;


typedef enum TWEAPON_TYPE
{
	WT_NORMAL = 0,
	WT_HAND,
	WT_STICK,
	WT_BOW,
	WT_1HAND,
	WT_LHAND,
	WT_2HAND,
	WT_SHIELD,
	WT_COUNT
} *LPTWEAPON_TYPE;

typedef enum TITEM_TYPE
{
	IT_WEAPON = 1,
	IT_DEFENSIVE,
	IT_ACCESSORY,
	IT_LONG,
	IT_MLONG,
	IT_SHIELD,
	IT_USE,
	IT_PARTS,
	IT_GRADE,
	IT_MONEY,
	IT_INVEN,
	IT_PET,
	IT_GAMBLE,	// 겜블타입
	IT_REFINE,
	IT_PACKAGE,
	IT_CRAFT,
	IT_COSTUME,
	IT_COUNT
} *LPTITEM_TYPE;

typedef enum TITEM_GROUP
{
	IG_QUESTITEMCHART = 0,
	IG_ITEMCHART,	
	IG_CRAFT, 
	IG_COUNT
} *LPTITEM_GROUP;

typedef enum TITEM_KIND
{
	IK_NONE,
	IK_1HAND,
	IK_LHAND,
	IK_2HAND,
	IK_CAKRAM,
	IK_AX,
	IK_BOW,
	IK_ARBALEST,
	IK_MBAR,
	IK_MSTICK,
	IK_VAJRA,
	IK_MULTIVAJRA,
	IK_SHIELD,
	IK_CLOTH,
	IK_UNIFORM,
	IK_LLEATHER,
	IK_HLEATHER,
	IK_LARMOR,
	IK_HARMOR,
	IK_BACK,
	IK_NECK,
	IK_FINGER,
	IK_BALL,
	IK_PET,
	IK_ARROW,
	IK_SARROW,
	IK_HP,
	IK_MP,
	IK_AP,
	IK_UPGRADE,
	IK_DOWNGRADE,
	IK_MAGICGRADE,
	IK_RAREGRADE,
	IK_SKILL,
	IK_SMSGUILD,
	IK_SMSPERSON,
	IK_SKILLONEINIT, // 스킬초기화
	IK_SKILLALLINIT,
	IK_MEMBERRECALL, // 파티원소환아이탬
	IK_MOVETOCHAR,	// 대상 캐릭터로 이동
	IK_GOLDPREMIUM,	// 골드프리미엄(pc방)
	IK_REVIVAL, //즉시 부활
	IK_MAXHP,
	IK_MAXMP,
	IK_RETURN,
	IK_FACE,
	IK_HAIR,
	IK_RACE,
	IK_NAME,
	IK_SEX,
	IK_MAIL,
	IK_MONEY,
	IK_GOLDPREMIUM2,
	IK_CATALYZER, // 제련 촉매제
	IK_ILLUSIONBACK, // 환영의 물약 재료가방
	IK_NPCCALL, // NPC 사용권
	IK_EXPBONUS, //사냥 보너스 경험치 획득
	IK_G_57,
	IK_G_58,
	IK_G_59,
	IK_G_60,
	IK_G_61,
	IK_G_62,
	IK_G_63,
	IK_G_64,
	IK_HANDAX,
	IK_G_66,
	IK_G_67,
	IK_G_68,
	IK_G_69,
	IK_G_70,
	IK_G_71,
	IK_G_72,
	IK_G_73,
	IK_G_74,
	IK_G_75,
	IK_G_76,
	IK_CLEARMAGIC,
	IK_CHANGE,	//가차
	IK_WRAP,	//밀납
	IK_ELD,		//착용레벨다운
	IK_GAINEXP, //경험치획득
	IK_CLEARREFINE,//제련초기화
	IK_CHGGRADEEFFECT,//강화이펙트변경
	IK_WASTEREFINE,//폐기된제련촉매제
	IK_COLOR,		//색상변경 //090922
	IK_CASH,
	IK_CHEER,
	IK_COSTUME_HAT,
	IK_COSTUME_DRESS,
	IK_COSTUME_RACE,
	IK_G_91,
	IK_G_92,
	IK_G_93,
	IK_G_94,
	IK_G_95,
	IK_COUNTRY,
	IK_AIDCOUNTRY,
	IK_COUNT,
	IK_WHIP,
	IK_NOTHING2,
	IK_NOTHING3,
	IK_GEM
} *LPTITEM_KIND;

typedef enum FORMULA_TYPE
{
	FTYPE_NONE = 0,
	FTYPE_PAP,				// 물리공격력
	FTYPE_PW,				// 사용안함
	FTYPE_LAP,				// 원거리공격력
	FTYPE_NAS,				// 물리공격속도
	FTYPE_AL,				// 공격등급
	FTYPE_DL,				// 방어등급
	FTYPE_PCR,				// 물리치명확률
	FTYPE_HP,				// 생명력
	FTYPE_HPR,				// 생명력 회복율
	FTYPE_PR,				// 사용안함
	FTYPE_PCMR,				// 사용안함
	FTYPE_PDP,				// 물리방어력
	FTYPE_MAP,				// 마법공격력
	FTYPE_CP,				// 사용안함
	FTYPE_MLAP,				// 사용안함
	FTYPE_MNAS,				// 마법공격속도
	FTYPE_MSP,				// 시전유지확률
	FTYPE_MCR,				// 마법치명확률
	FTYPE_MP,				// 정신력
	FTYPE_MPR,				// 정신력회복율
	FTYPE_ITEMPOWER,		// 아이템 성능비
	FTYPE_WEAPONPOWER,		// 무기 성능비
	FTYPE_MDP,				// 마법방어력
	FTYPE_MCS,				// 마법시전속도
	FTYPE_MAT,				// 사용안함
	FTYPE_PSC,				// 사용안함
	FTYPE_MSC,				// 사용안함
	FTYPE_MAL,				// 마법공격등급
	FTYPE_MDL,				// 마법방어등급
	FTYPE_PAR,				// 물리공격성공률
	FTYPE_MAR,				// 마법공격성공률
	FTYPE_PCD,				// 물리치명피해
	FTYPE_MCD,				// 마법치명피해
	FTYPE_1ST,				// 1차 속성
	FTYPE_COUNT
};

typedef enum MAGIC_TYPE
{
	MTYPE_NONE,
	MTYPE_STR,		//힘
	MTYPE_DEX,		//민첩
	MTYPE_CON,		//체력
	MTYPE_INT,		//지능
	MTYPE_WIS,		//지혜
	MTYPE_MEN,		//정신
	MTYPE_PAP,		//물리공격력
	MTYPE_PDP,		//물리방어력
	MTYPE_LAP,		//원거리공격력
	MTYPE_NAS,		//일반공격속도
	MTYPE_AL,		//공격등급
	MTYPE_DL,		//방어등급
	MTYPE_CR,		//치명확률
	MTYPE_HP,		//생명력
	MTYPE_PR,		//물리저항
	MTYPE_MDP,		//마법방어력
	MTYPE_MAP,		//마법공격력
	MTYPE_CP,		//저주성공률
	MTYPE_MCS,		//마법시전속도
	MTYPE_CMP,		//시전유지확률
	MTYPE_MCR,		//마법치명확률
	MTYPE_MP,		//정신력
	MTYPE_MR,		//마법상태저항
	MTYPE_FR,		//화염저항
	MTYPE_IR,		//냉기저항
	MTYPE_ER,		//전기저항
	MTYPE_SR,		//신성저항
	MTYPE_DR,		//암흑저항
	MTYPE_OR,		//독저항
	MTYPE_DAMAGE,	//Damage
	MTYPE_AVP,		//회피확률
	MTYPE_HPR,		//HP회복률
	MTYPE_MPR,		//MP회복률
	MTYPE_SDR,		//방패방어확률
	MTYPE_AA,		//자동공격
	MTYPE_EFC,		//동시발사갯수
	MTYPE_LAA,		//원거리자동공격
	MTYPE_HI,		//생명력흡수
	MTYPE_RMC,		//소환개체수
	MTYPE_MI,		//정신력흡수
	MTYPE_PCMR,		//물리치명최대
	MTYPE_MCMR,		//마법치명최대
	MTYPE_NAP,		//무속성공격력
	MTYPE_FAP,		//화염공격력
	MTYPE_IAP,		//냉기공격력
	MTYPE_EAP,		//전기공격력
	MTYPE_SAP,		//신성공격력
	MTYPE_DAP,		//암흑공격력
	MTYPE_RLD,		//요구레벨감소
	MTYPE_MHP,		//최대 HP
	MTYPE_MMP,		//최대 MP
	MTYPE_MPAP,		//마법근거리공격력
	MTYPE_MLAP,		//마법원거리공격력
	MTYPE_PAS,		//근거리공속
	MTYPE_LAS,		//원거리공속
	MTYPE_MPAS,		//마법근거리공속
	MTYPE_MLAS,		//마법원거리공속
	MTYPE_SPDPOW,	//방패물리방어력
	MTYPE_SMDPOW,	//방패마법방어력
	MTYPE_SMDR,		//방패마법방어확률
	MTYPE_PMINAP,	//물리최소공력력
	MTYPE_PMAXAP,	//물리최대공격력
	MTYPE_LMINAP,	//원거리최소공격력
	MTYPE_LMAXAP,	//원거리최대공격력
	MTYPE_MPMINAP,	//마법최소공격력
	MTYPE_MPMAXAP,	//마법최대공격력
	MTYPE_MLMINAP,	//마법원거리최소공격력
	MTYPE_MLMAXAP,	//마법원거리최대공격력
	MTYPE_LEPERAL,	//레벨당공격등급
	MTYPE_LEPERDL,	//레벨당방어등급
	MTYPE_LEPERPMINAP,//레벨당최소공격력
	MTYPE_LEPERPMAXAP,//레벨당최대공격력
	MTYPE_LEPERMMINAP,//레벨당최소마법공격력
	MTYPE_LEPERMMAXAP,//레벨당최대마법공격력
	MTYPE_LEPERPDP,	//레벨당방어력
	MTYPE_LEPERMDP,	//레벨당마법방어력
	MTYPE_LEPERMHP,	//레벨당생명력
	MTYPE_LEPERMMP,	//레벨당정신력
	MTYPE_LEPERLV,	//레벨당성능레벨
	MTYPE_DEPDA,	//물리피해감소
	MTYPE_DEMDA,	//마법피해감소
	MTYPE_ALLREG,	//전체저항
	MTYPE_MITEMR,	//매직아이템드랍확률
	MTYPE_DESKILL,	//맞을때 스킬발동
	MTYPE_ATSKILL,	//때릴때 스킬발동
	MTYPE_MAL,		//마법공격레벨
	MTYPE_MDL,		//마법방어레벨
	MTYPE_MDAMAGE,	//마법데미지
	MTYPE_R_DGDEC,	//%Value 확률로 데미지 감소
	MTYPE_R_DGMIR,	//%Value 확률로 데미지 반사
	MTYPE_R_RMON,	//%Value 확률로 몬스터 소환
	MTYPE_R_HIDE,	//%Value 확률로 은신
	MTYPE_R_GETHP,	//%Value 확률로 생명력 흡수
	MTYPE_R_GETMP,	//%Value 확률로 정신력 흡수
	MTYPE_R_MGADD,	//%Value 확률로 300% 추가 데미지
	MTYPE_R_BLOCK,	//%Value 확률로 기절
	MTYPE_R_HYPNOSIS,//%Value 확률로 최면
	MTYPE_R_RUNAWAY,//%Value 확률로 도망
	MTYPE_R_FLASH,	//%Value 확률로 섬광
	MTYPE_R_DARK,	//%Value 확률로 암흑
	MTYPE_R_REMOVE,	//%Value 확률로 지속효과 제거
	MTYPE_R_SILENCE,//%Value 확률로 기술봉쇄
	MTYPE_R_DISDEFEND,//%Value 확률로  방어구 해제
	MTYPE_R_DISWEAPON,//%Value 확률로 무장해제
	MTYPE_R_MOVESPEED,//%Value 확률로 이동속도 감소
	MTYPE_R_TRANS,	//%Value 확률로 변신
	MTYPE_R_DAP,	//%Value 확률로 공격력 감소
	MTYPE_R_DDP,	//%Value 확률로 방어력 감소
	MTYPE_R_BLOOD,	//%Value 확률로 출혈
	MTYPE_R_MAS,	//%Value 확률로 마법공속 감소
	MTYPE_EQLEVEL,	// 착용 레벨
	MTYPE_REPCOST,	// 수리 비용
	MTYPE_AFTERMATH,// 부활후유증
	MTYPE_COUNT
} *LPMAGIC_TYPE;

typedef enum TNPC_TYPE
{
	TNPC_NONE = 0,
	TNPC_SKILL_MASTER,
	TNPC_ITEM,
	TNPC_REVIVAL,
	TNPC_MAKE,
	TNPC_UPGRADE,
	TNPC_MAPPORTAL,
	TNPC_BOX,
	TNPC_PORTAL,
	TNPC_WAREHOUSE,
	TNPC_AUCTION,
	TNPC_GUILD,
	TNPC_TOURNAMENT_GATE_KEEPER,
	TNPC_CASTLE,
	TNPC_RETURN,
	TNPC_DIVINER,	//점술가(소울메이트)
	TNPC_GAMBLE,	//겜블
	TNPC_REPAIR,	//수리
	TNPC_REFINE,	//제련
	TNPC_SKILL_RENT,
	TNPC_CRAFT,
	TNPC_PVPOINT,
	TNPC_MONSTER,
	TNPC_RPSGAME,
	TNPC_ARENA,
	TNPC_MAGICITEM,
	TNPC_COUNT
} *LPTNPC_TYPE;

typedef enum HOTKEY_TYPE
{
	HOTKEY_NONE = 0,
	HOTKEY_SKILL,
	HOTKEY_ITEM,
	HOTKEY_PET,
	HOTKEY_COUNT
} *LPHOTKEY_TYPE;

typedef enum POSTURE_TYPE
{
	PST_NORMAL = 0,
	PST_ATTACK,
	PST_DEFEND
} *LPPOSTURE_TYPE;

// SKILL TYPE VALUE
typedef enum SKILL_TARGET
{
	STG_NONE = 0,
	STG_RECALLMON,
	STG_MYSELF,
	STG_OURFORCES,
	STG_ENEMY,
	STG_ENEMYTRAP,
	STG_ALL,
	STG_FIELD
} *LPSKILLTARGET;

typedef enum SKILL_DATA_INC
{
	SVI_INCREASE = 1,
	SVI_DECREASE,
	SVI_MULTIPLY,
	SVI_DIVIDE,
	SVI_PRECENT
} *LPSKILLVALUEINC;

typedef enum SKILL_ACTION
{
	SA_ONCE = 0,
	SA_CONTINUE,
	SA_DOT,
	SA_BUFF,
	SA_PASSIVE,
	SA_COUNT
} *LPSKILL_TYPE;

typedef enum SKILL_DATA_TYPE
{
	SDT_EQUIP,
	SDT_ABILITY,
	SDT_RECALL,
	SDT_TRANS,
	SDT_TRAP,
	SDT_CURE,
	SDT_STATUS,
	SDT_AI,
	SDT_ITEM,
	SDT_COUNT
} *LPSKILL_DATA_TYPE;

typedef enum SKILL_CURE_TYPE
{
	SCT_REVIVAL=1,
	SCT_MCPOWER,
	SCT_POISON,
	SCT_WOUND,
	SCT_DISEASE,
	SCT_POSREMOVE,
	SCT_NEGREMOVE,
	SCT_HP,
	SCT_CANCEL,
	SCT_CANCELRECALL,
	SCT_INCLIFTTIME,
	SCT_GETRECALLMP,
	SCT_AFTERMATH,
	SCT_RESETCOOLTIME,
	SCT_HPTRANS,
	SCT_MPTRANS,
	SCT_DIE,
	SCT_GETRECALLHP,
	SCT_MP
} *LPSKILL_CURE_TYPE;

typedef enum SKILL_KIND
{
	NORMAL_EQUIP =0,

	WARRIOR_ATTACK,
	WARRIOR_DEFEND,
	WARRIOR_STATE,

	RANGER_BATTLE,
	RANGER_MURDER,
	RANGER_TRAP,

	ARCHER_BATTLE,
	ARCHER_SHOOT,
	ARCHER_SURVIVE,

	WIZARD_FIRE,
	WIZARD_ICE,
	WIZARD_ELEC,

	PRIEST_SANCTITY,
	PRIEST_DARK,
	PRIEST_GUARD,

	SORCERER_SUPPORT,
	SORCERER_SUMMONS,
	SORCERER_CONTROL,

	SKILLKIND_COUNT
} *LPSKILL_KIND;

typedef enum SDT_EQUIP_TYPE
{
	SDT_EQUIP_NONE = 0,
	SDT_EQUIP_1HAND,
	SDT_EQUIP_LHAND,
	SDT_EQUIP_2HAND,
	SDT_EQUIP_CAKRAM,
	SDT_EQUIP_AX,
	SDT_EQUIP_BOW,
	SDT_EQUIP_ARBALEST,
	SDT_EQUIP_MBAR,
	SDT_EQUIP_MSTICK,
	SDT_EQUIP_VAJRA,
	SDT_EQUIP_MULTIVAJRA,
	SDT_EQUIP_SHIELD,
	SDT_EQUIP_CLOTH,
	SDT_EQUIP_UNIFORM,
	SDT_EQUIP_LLEATHER,
	SDT_EQUIP_HLEATHER,
	SDT_EQUIP_LARMOR,
	SDT_EQUIP_HARMOR,
	SDT_EQUIP_COUNT
} *LPSDT_EQUIP_TYPE;

typedef enum SDT_SUMMON_TYPE
{
	SDT_SUMMON_NONE = 0,
	SDT_SUMMON_FIRE,
	SDT_SUMMON_ICE,
	SDT_SUMMON_ELEC,
	SDT_SUMMON_CRYSTAL,
	SDT_SUMMON_ICESPIRIT,
	SDT_SUMMON_DARKEVIL,
	SDT_SUMMON_MONSTER,
	SDT_SUMMON_ELECSPIRIT,
	SDT_SUMMON_SNOW,
	SDT_SUMMON_ANGEL,
	SDT_SUMMON_FIRESPIRIT,
	SDT_SUMMON_COUNT
} *LPSDT_SUMMON_TYPE;

typedef enum SDT_MORPH_TYPE
{
	SDT_MORPH_NONE = 0,
	SDT_MORPH_CROW,
	SDT_MORPH_SQUIRREL,
	SDT_MORPH_COUNT
} *LPSDT_MORPH_TYPE;

typedef enum SDT_MINE_TYPE
{
	SDT_MINE_NONE = 0,
	SDT_MINE_ICE,
	SDT_MINE_POISON,
	SDT_MINE_EXP,
	SDT_MINE_ELEC,
	SDT_MINE_FIRE,
	SDT_MINE_COUNT
} *LPSDT_MINE_TYPE;

typedef enum SDT_TRANS_TYPE
{
	SDT_TRANS_CROW = 1,			// 까마귀
	SDT_TRANS_CHIPMUNK,			// 다람쥐
	SDT_TRANS_RANDOM,			// 랜덤변신
	SDT_TRANS_DISGUISE_D,		// 변장 드프겔
	SDT_TRANS_DISGUISE_C,		// 변장 크락시온
	SDT_TRANS_DISGUISE_B		// 변장 브로어
} *LPSDT_TRANS_TYPE;

typedef enum SDT_ITEM_TYPE
{
	SDT_ITEM_NONE = 0,
	SDT_ITEM_DELUSER,
	SDT_ITEM_DELTARGET
} *LPSDT_ITEM_TYPE;

typedef enum SDT_STATUS_TYPE
{
	SDT_STATUS_NONE = 0,
	SDT_STATUS_SLIDE,
	SDT_STATUS_SILENCE,
	SDT_STATUS_BLOCK,
	SDT_STATUS_DISWEAPON,
	SDT_STATUS_COUNTERATK,
	SDT_STATUS_BOOST,
	SDT_STATUS_ATKMODE,
	SDT_STATUS_HOLD,
	SDT_STATUS_HIDE,
	SDT_STATUS_CANCELMAGIC,
	SDT_STATUS_MARK,
	SDT_STATUS_FLASH,
	SDT_STATUS_MAGIC,
	SDT_STATUS_SEEKMINE,
	SDT_STATUS_CANCELMINE,
	SDT_STATUS_TELEPORT,
	SDT_STATUS_MAGICMIRROR,
	SDT_STATUS_EXCEPTMAGIC,
	SDT_STATUS_SUMMONEYE,
	SDT_STATUS_DISTRIBUTE,	//피해분산
	SDT_STATUS_SEEKRANGE,
	SDT_STATUS_ATKRANGE,
	SDT_STATUS_MOVESPEED,
	SDT_STATUS_WARP,
	SDT_STATUS_SUMMON,
	SDT_STATUS_CRAZEMODE,
	SDT_STATUS_DEFENDMODE,
	SDT_STATUS_TIMMER,
	SDT_STATUS_LINK,
	SDT_STATUS_BATTLE,
	SDT_STATUS_RETURN,
	SDT_STATUS_DEFEND,
	SDT_STATUS_AVOID,
	SDT_STATUS_ATTACK,
	SDT_STATUS_CATTACK,
	SDT_STATUS_PARACHUTE,
	SDT_STATUS_MERMAID,
	SDT_STATUS_FINISHCURSE,
	SDT_STATUS_EXCEPTPHYSIC,
	SDT_STATUS_CLARITY,
	SDT_STATUS_PCBANG,
	SDT_STATUS_ITEMUPGRADE,		// 강화확률 200%
	SDT_STATUS_DISGUISE,
	SDT_STATUS_PREMIUM,
	SDT_STATUS_DARK,
	SDT_STATUS_STANDHIDE,
	SDT_STATUS_DISDEFEND,
	SDT_STATUS_STOPRECOVER,
	SDT_STATUS_DIE,			//시전자사망
	SDT_STATUS_HPMPCHANGE,	//HP,MP 교환
	SDT_STATUS_HPTOMP,		//HP를 MP로
	SDT_STATUS_NOTSELECT,	//선택불가
	SDT_STATUS_HYPNOSIS,	//최면
	SDT_STATUS_HIDEDETECT,	//매복감지
	SDT_STATUS_MASK,		//복면
	SDT_STATUS_RETURNPOS,	//귀환
	SDT_STATUS_DURATIONPROB, //수리비용 증가/감소 비율 
	SDT_STATUS_REFINEPROB,   //제련 성공확률 증가/감소
	SDT_STATUS_TRANSPROB,    //옵션전이 확률 증가/감소
	SDT_STATUS_MAGICPROB,    //제작 성공확률 증가/감소
	SDT_STATUS_RANDOM,		//랜덤 버프
	SDT_STATUS_ITEMDROP,	//몬스터 아이템 드랍률
	SDT_STATUS_QUESTEXP,	//퀘스트경험치
	SDT_STATUS_ITEMGUARD,	//아이템보호
	SDT_STATUS_PRICEUP,		//판매금액
	SDT_STATUS_DOUBLEHEAD,	//머리크기증가 //090922
	SDT_STATUS_AUTOEXP,		//자동 경험치 증가
	SDT_STATUS_MAGICDROP,	//매직드랍률 증가
	SDT_STATUS_GAINEXP,		//경험치 증가
	SDT_STATUS_CUTELBOW,
	SDT_STATUS_GMHIDE,		//GM투명물약
	SDT_STATUS_COUNT
} *LPSDT_STATUS_TYPE;

typedef enum SDT_AI_TYPE
{
	SDT_AI_NONE = 0,
	SDT_RUNAWAY = 1,
	SDT_CHANGETARGET,
	SDT_LEAD,
	SDT_TEMPT,
	SDT_CONTROL,
	SDT_AGGRO,
	SDT_RESETAGGRO,
	SDT_AGGROTRANS,
	SDT_AGGRODAMAGE,
	SDT_AGGROGNEER
} *LPSDT_AI_TYPE;

typedef enum SKILL_DATA_ATTR
{
	SATT_NONE,
	SATT_PHYSIC,
	SATT_LONG,
	SATT_MAGICNO,	//무속성
	SATT_MAGICSR,	//신성
	SATT_MAGICDR,	//암흑
	SATT_MAGICER,	//전기
	SATT_MAGICFR,	//화염
	SATT_MAGICPR,	//독
	SATT_MAGICIR,	//냉기
	SATT_WOUND,		//상처
	SATT_DISEASE,	//질병
	SATT_SPECIAL	//특수
} *LPSKILL_DATA_ATTR;

typedef enum SKILL_EXEC_RECALL
{
	SER_NONE = 0,
	SER_FIREBALL,
	SER_ICEBALL,
	SER_ELECBALL,
	SER_CRYSTAL,
	SER_ICESOUL,
	SER_DARKDEVIL,
	SER_MONSTER,
	SER_LIGHTINGSOUL,
	SER_SNOW,
	SER_ANGEL,
	SER_FIRESOUL,
	SER_SKILL
} *LPSKILL_EXEC_RECALL;

//	Quest term status
typedef enum QUEST_TERM_STATUS
{
	QTS_RUN = 0,
	QTS_SUCCESS,
	QTS_FAILED
} *LPQUEST_TERM_STATUS;

//	Quest type
typedef enum QUEST_TYPE
{
	QT_NONE = 0,
	QT_DEFTALK = 1,
	QT_GIVESKILL,
	QT_GIVEITEM,
	QT_DROPITEM,
	QT_SPAWNMON,
	QT_TELEPORT,
	QT_COMPLETE,
	QT_MISSION,
	QT_ROUTING,
	QT_NPCTALK,
	QT_DROPQUEST,
	QT_CHAPTERMSG,
	QT_SWITCH,
	QT_DIEMON,
	QT_DEFENDSKILL,
	QT_DELETEITEM,
	QT_SENDPOST,
	QT_CRAFT,
	QT_REGEN,
	QT_COUNT
} *LPQUESTTYPE;


// Quest condition type
typedef enum QUEST_CONDITION_TYPE
{
	QCT_NONE = 0,
	QCT_UPPERLEVEL,
	QCT_LOWERLEVEL,
	QCT_HAVEQUEST,
	QCT_HAVEITEM,
	QCT_CLASS,
	QCT_MONID,
	QCT_MAPID,
	QCT_LEFT,
	QCT_TOP,
	QCT_RIGHT,
	QCT_BOTTOM,
	QCT_PROB,
	QCT_HAVENOITEM,
	QCT_COUNTRY,
	QCT_AFTERQUESTCOMPLETE,
	QCT_SAMELEVEL,
	QCT_SEX,
	QCT_BEFOREQUESTCOMPLETE,
	QCT_MAINTAINSKILL,
	QCT_SWITCH,
	QCT_COUNTMAX,	//서버 컨디션
	QCT_NOPARENT	//서버 컨디션
} *LPQUEST_CONDITION_TYPE;


//	Trigger type
typedef enum TRIGGER_TYPE
{
	TT_EXECQUEST = 1,
	TT_POSITION,
	TT_TALKNPC,
	TT_GETITEM,
	TT_KILLMON,
	TT_KILLUNIT,
	TT_RUNSWITCH,
	TT_RUNGATE,
	TT_COMPLETE,
	TT_USEITEM,
	TT_LEAVEMAP,
	TT_LEVELUP,
	TT_WARREGION
} *LPTRIGGER_TYPE;


//	Term type
typedef enum TERM_TYPE
{
	QTT_COMPQUEST = 1,
	QTT_GETITEM,
	QTT_HUNT,
	QTT_SKILLID,
	QTT_ITEMID,
	QTT_TIMER,
	QTT_MONID,
	QTT_MAPID,
	QTT_LEFT,
	QTT_TOP,
	QTT_RIGHT,
	QTT_BOTTOM,
	QTT_TALK,
	QTT_HEIGHT,
	QTT_SWITCH,
	QTT_SPAWNID,
	QTT_USEITEM,
	QTT_QUESTCOMPLETED,
	QTT_TSTART_POS,
	QTT_TCOMP_POS
} *LPTERM_TYPE;


//	Reward type
typedef enum REWARD_TYPE
{
	RT_GOLD = 1,
	RT_ITEM,
	RT_SKILL,
	RT_SKILLUP,
	RT_CHGCLASS,
	RT_EXP,
	RT_MAGICITEM
} *LPREWARD_TYPE;


//	Reward method
typedef enum REWARD_METHOD
{
	RM_DEFAULT = 1,
	RM_SELECT,
	RM_PROB,
	RM_RANDOM
} *LPREWARD_METHOD;


//	Item Obtain Process of Party
typedef enum PARTY_TYPE
{
	PT_FREE = 0,
	PT_SOLO,
	PT_HUNTER,
	PT_LOTTERY,
	PT_CHIEF,
	PT_ORDER
} *LPPARTY_TYPE;


//	The Owner Type for a Object
typedef enum OWNER_TYPE
{
	OWNER_NONE = 0,
	OWNER_PRIVATE,
	OWNER_PARTY
} *LPOWNER_TYPE;

typedef enum GUILD_DUTY
{
	GUILD_DUTY_NONE = 0,
	GUILD_DUTY_VICECHIEF,
	GUILD_DUTY_CHIEF
} *LPGUILD_DUTY;

typedef enum GUILD_PEERAGE
{
	GUILD_PEER_NONE = 0,
	GUILD_PEER_BARON,		// 남작
	GUILD_PEER_VISCOUNT,	// 자작
	GUILD_PEER_COUNT,		// 백작
	GUILD_PEER_MARQUIS,		// 후작
	GUILD_PEER_DUKE			// 공작
} *LPGUILD_PEERAGE;

typedef enum GUILD_MEMBER_TYPE
{
	GUILD_TYPE_MEMBER = 0,	// 길원
	GUILD_TYPE_TACTICS		// 용병
} *LPGUILD_MEMBER_TYPE;

typedef enum GUILD_RELATION
{
	RELATION_NONE = 0,
	RELATION_ALLIENCE,
	RELATION_ENEMY
} *LPGUILD_RELATION;

typedef enum CHAT_TYPE
{
	CHAT_NOMAL = 0,
	CHAT_OP
} *LPCHAT_TYPE;

typedef enum CHAT_GROUP
{
	CHAT_WHISPER = 0,
	CHAT_NEAR,
	CHAT_MAP,
	CHAT_WORLD,
	CHAT_PARTY,
	CHAT_GUILD,
	CHAT_FORCE,
	CHAT_OPERATOR,
	CHAT_TACTICS,
	CHAT_SHOW,
	CHAT_COUNT
} *LPCHAT_GROUP;

typedef enum BATTLE_STATUS
{
	BS_NORMAL = 0,
	BS_BATTLE,
	BS_ALARM,
	BS_READY,
	BS_PEACE,
	BS_OPENLGATE,
	BS_OPENRGATE,
	BS_NOBATTLE
} *LPBATTLE_STATUS;

typedef enum OCCUPY_TYPE
{
	OCCUPY_DEFEND = 0,
	OCCUPY_ACCEPT
} *LPLOCAL_OCCUPY_TYPE;

typedef enum CASTLE_OCCUPY_TYPE
{
	CASTLE_OCCUPY = 1,
	CASTLE_DEFEND
} *LPCASTLE_OCCUPY_TYPE;

typedef enum COMMAND_TYPE
{
	COMMAND_STANDBY=0,
	COMMAND_TRANSFER
} *LPCOMMAND_TYPE;

typedef enum MONAI_TYPE
{
	MONAI_FIRSTATK = 1,
	MONAI_SECONDATK
} *LPMON_TYPE;

typedef enum TNAME_COLOR
{
	TNCOLOR_ALLI = 0,
	TNCOLOR_NO_REWARD,
	TNCOLOR_PIECE,
	TNCOLOR_ENEMY,
	TNCOLOR_LIGHT = TNCOLOR_ENEMY,
	TNCOLOR_MIDDLE,
	TNCOLOR_HAVY,
	TNCOLOR_COUNT
} *LPTNAME_COLOR;

typedef enum TATTACK_DELAY
{
	TAD_NONE = 0,
	TAD_PHYSICAL,
	TAD_LONG,
	TAD_MAGIC,
	TAD_COUNT
} *LPTATTACK_DELAY;

typedef enum TSKILLDATAOP_TYPE
{
	TSKILLDATAOP_CONSTANT = 0,
	TSKILLDATAOP_LINE,
	TSKILLDATAOP_EXP,
	TSKILLDATAOP_DEC,
	TSKILLDATAOP_COUNT
} *LPTSKILLDATAOP_TYPE;

typedef enum TSKILLRANGE_TYPE
{
	TSKILLRANGE_NONE = 0,
	TSKILLRANGE_POINT,
	TSKILLRANGE_CIRCLE,
	TSKILLRANGE_LINE,
	TSKILLRANGE_MCIRCLE,
	TSKILLRANGE_MFORWARD,
	TSKILLRANGE_TBACKWARD,
	TSKILLRANGE_TNEAR,
	TSKILLRANGE_COUNT
} *LPTSKILLRANGE_TYPE;

typedef enum TSKILLTARGET_TYPE
{
	TSKILLTARGET_NONE = 0,
	TSKILLTARGET_SELF,
	TSKILLTARGET_RECALL,
	TSKILLTARGET_ALLIANCE,
	TSKILLTARGET_PARTY,
	TSKILLTARGET_CORPS,
	TSKILLTARGET_GUILD,
	TSKILLTARGET_DEAD,
	TSKILLTARGET_ENEMY,
	TSKILLTARGET_MINE,
	TSKILLTARGET_ALL,
	TSKILLTARGET_MONSTER,
	TSKILLTARGET_ENEMYRECALL,
	TSKILLTARGET_ALLIANCEEXCEPTME,
	TSKILLTARGET_PARTYEXCEPTME,		//나를제외한 파티원
	TSKILLTARGET_MAINRECALL,		//메인소환수
	TSKILLTARGET_LOWLEVELMON,		//시전자의 레벨보다 작거나 같은 몬스터
	TSKILLTARGET_LOWLEVELMONDEAD,	//시전자의 레벨보다 작거나 같은 몬스터의 시체
	TSKILLTARGET_COUNT
} *LPTSKILLTARGET_TYPE;

typedef enum TRECALL_TYPE
{
	TRECALLTYPE_NONE = 0,
	TRECALLTYPE_MAIN,
	TRECALLTYPE_AUTOAI,
	TRECALLTYPE_MINE,
	TRECALLTYPE_SKILL,
	TRECALLTYPE_MAINTAIN,
	TRECALLTYPE_SPY,
	TRECALLTYPE_PET,
	TRECALLTYPE_COUNT
} *LPTRECALL_TYPE;

typedef enum TRSCSCMD_TYPE
{
	TRSCSCMD_NONE = 0,
	TRSCSCMD_MOVE,
	TRSCSCMD_ATTACK,
	TRSCSCMD_PROTECT,
	TRSCSCMD_COUNT
} *LPTRSCSCMD_TYPE;

//CUSTOM
typedef enum TTITLE_KIND
{
	TITLE_NONE = 0,
	TITLE_HONOR_RANK,
	TITLE_TOURNAMENT,
	TITLE_BATTLE, // Percentage
	TITLE_KILLS,
	TITLE_DEATHS,
	TITLE_MENTOR,
	TITLE_HONOR,
	TITLE_GOLD,
	TITLE_OPERATOR, //K_9
	TITLE_K_10,
	TTILE_K_11,
	TITLE_K_12,
	TITLE_K_13,
	TITLE_K_14,
	TITLE_QUEST,
	TITLE_COUNT
} *LPTTITLE_KIND;
//END
typedef enum REVIVAL_TYPE
{
	REVIVAL_NPC = 0,
	REVIVAL_GHOST,
	REVIVAL_HELP
} *LPREVIVAL_TYPE;

typedef enum CABINET_TYPE
{
	CABINET_DEFAULT = 0,
	CABINET_TWO,
	CABINET_THREE,
	CABINET_COUNT
} * LPCABINET_TYPE;

typedef enum POST_TYPE
{
	POST_NORMAL = 0,
	POST_PACKATE,
	POST_BILLS,
	POST_RETURN,
	POST_PAYMENT,
	POST_NPC,
	POST_OPERATOR,
	POST_CASH
} *LPPOST_TYPE;

typedef enum POST_RETURN_TYPE
{
	PTURN_RETURN = 0,
	PTURN_PAYMENT
} *LPPOSTRETURN_TYPE;

typedef enum PET_KIND
{
	PETKIND_NONE = 0,	//없음
	PETKIND_ONE,		//1인탑승
	PETKIND_TWO,		//2인탑승
	PETKIND_POST,		//우편
	PETKIND_TELE,		//마을기억/귀환
	PETKIND_ITEM,		//아이탬자동수집
	PETKIND_INVEN,		//가방
	PETKIND_EXP			//경험치증가
} * LPPET_KIND;

typedef enum PET_CONDITION
{
	PETCON_NONE = 0,	//없음
	PETCON_LEVEL,		//레벨제한
	PETCON_PCBANG
} * LPPET_CONDITION;

typedef enum PET_ACTION
{
	PETACTION_NONE = 0,	// 없음
	PETACTION_RIDING,	// 탑승
	PETACTION_DISMOUNT	// 내리기
} * LPPET_ACTION;

typedef enum TELEPORTITEM_TYPE
{
	TP_RECALL = 0,
	TP_MOVETO,
	TP_NONEDEF
};

typedef enum TCASHITEMBUY_TYPE
{
	CASHITEM_BUY = 1,
	CASHITEM_PRESENT
};

typedef enum TSTORAGE_TYPE
{
	STORAGE_INVEN = 0,
	STORAGE_CABINET,
	STORAGE_POST
};

typedef enum TITEMOWNER_TYPE
{
	TOWNER_CHAR = 0,
	TOWNER_GUILD,
	TOWNER_NPC
};

typedef enum TREPARE_TYPE
{
	RPT_NORMAL = 0,
	RPT_EQUIP,
	RPT_ALL
};

typedef enum TPOSITIVE_TYPE
{
	SPT_NEGATIVE	= 0,
	SPT_POSITIVE,
	SPT_NONE
};

typedef enum THEROSELECT_TYPE 
{
	HST_HEROSELECT = 0,
	HST_CHANGENAME,
	HST_LOCALINIT,
	HST_CASTLEINIT
};

typedef enum TSYSMSG_TYPE
{
	SM_NONE = 0,
	SM_BATTLE_NORMAL,		//_T("점령전 지역이 일반상태로 전환되었습니다.")
	SM_BATTLE_START,		//_T("지역 점령전이 시작되었습니다.")
	SM_BATTLE_START_ALARM,	//DWORD _T("지역 점령전이 %d(분/초)후 시작됩니다.")
	SM_BATTLE_END_ALARM,	//DWORD _T("지역 점령전이 %d(분/초)후 종료됩니다.")
	SM_BATTLE_PEACE,		//_T("지역 점령전이 종료되어 평화상태로 전환되었습니다. 이 지역에서는 5분간 전투를 할 수 없습니다.")
	SM_BATTLE_OPENGATE,		//_T("현재 지역의 성문이 열렸습니다.")
	SM_BATTLE_BOSSDIE,		//_T("현재 지역의 수호신이 잡혀 점령국가가 변경되었습니다.")
	SM_DUAL_WIN,			//STRING, STRING _T("[%s]님이 [%s]님과의 결투에서 승리하였습니다.")
	SM_EVENT_QUARTER,		//BYTE BYTE STRING BYTE _T("%d:%d 타임 행운권을 추첨하겠습니다. 이번 타임 선물은 [%s]입니다.\n두구두구두구~~\n축하합니다!! 행운번호 [%d]번이 당첨 되셨습니다. 선물은 잠시후 편지를 통해 자동 발송 됩니다.")
	SM_CHAT_BAN,			//DWORD _T("당신은 %d(분/초)간 채팅이 금지되었습니다.")
	SM_CASTLE_NORMAL,		//공성전 지역이 일반상태로 전환되었습니다.
	SM_CASTLE_START,		//공성전이 시작되었습니다.
	SM_CASTLE_START_ALARM,	//DWORD 공성전이 %d(분/초)후 시작됩니다.
	SM_CASTLE_END_ALARM,	//DWORD 공성전이 %d(분/초)후 종료됩니다.
	SM_CASTLE_PEACE,		//공성전이 종료되어 평화상태로 전환되었습니다. 이 지역에서는 5분간 전투를 할 수 없습니다.
	SM_CASTLE_END,			//%s 성물 쟁탈전에서 %s길드가 승리하였습니다.
	SM_ITEM_EXPIRE,			//[아이템]이 %d(분)후 사용기간이 만료되어 사라집니다.
	SM_TOURNAMENT_STEP,		//토너먼트의 xxx(이)가 시작(종료) 되었습니다.
	SM_TOURNAMENT_COUNTDOWN, // 30초부터
	SM_MISSION_NORMAL,		//%d (짝수, 홀수) 미션지역의 전쟁이 종료되었습니다.
	SM_MISSION_START,		//%d (짝수, 홀수) 미션지역의 전쟁이 시작되었습니다.
	SM_MISSION_BOSSDIE,		//%s 미션지역을 %d 국가가 점령했습니다.
	SM_MISSION_START_ALARM, //%d (짝.홀) 미션전쟁이 %d(분/초)후 시작됩니다.
	SM_MISSION_END_ALARM,	//%d (짝.홀) 미션전쟁이 %d(분/초)후 종료됩니다.
	SM_MISSION_PEACE,		//%d (짝수, 홀수) 미션지역의 전쟁이 종료되었습니다.
	SM_MISSION_TIMEOUT,		//%s 미션지역을 점령한 국가가 없어 몬스터 지역으로 전환되었습니다. 
	SM_EVENT_LOTTERY,		// 추첨 이벤트 메시지 << SM_EVENT_LOTTERY << str타이틀 << w아이템종류수 << w아이템ID << b아이템수 << w당첨유저수 << str유저네임1,2,3,,,,,(유저수만큼)
	SM_ARENA_COUNTDOWN,
	SM_SKYGARDEN_NORMAL,	//천공전 지역이 일반상태로 전환되었습니다.
	SM_SKYGARDEN_START,		//천공전이 시작되었습니다.
	SM_SKYGARDEN_START_ALARM,	//DWORD 천공전이 %d(분/초)후 시작됩니다.
	SM_SKYGARDEN_END_ALARM,	//DWORD 천공전이 %d(분/초)후 종료됩니다.
	SM_SKYGARDEN_PEACE,		//천공전이 종료되어 평화상태로 전환되었습니다. 이 지역에서는 전투를 할 수 없습니다.
	SM_SKYGARDEN_END,	
	SM_BOW_ALARM,
	SM_BOW_ENDALARM,//천공전에서 %d 국가가 승리하였습니다.
};

typedef enum TITEMGRADEEFFECT_TYPE
{
	IE_NONE = 0,
	IE_SEA,
	IE_FIRE,
	IE_LIGHTING,
	IE_ICE,
	IE_BLACK,
	IE_NEW1,
	IE_NEW2,
	IE_NEW3,
	IE_NEW4,
	IE_NEW5,
	IE_NEW6,
	IE_NEW7,
	IE_NEW8,
	IE_NEW9,
	IE_NEW10,
	IE_NEW11,
	IE_NEW12,
	IE_COUNT
} *LPTITEMGRADEEFFECT_TYPE;

typedef enum DURING_TYPE
{
	DURINGTYPE_TIME = 0x01,
	DURINGTYPE_DAY = 0x02,
	DURINGTYPE_USE = 0x40,
	DURINGTYPE_TAKE = 0x80
};

typedef enum PVP_EVENT
{
	PVPE_GUILD = 0,
	PVPE_KILL_H,
	PVPE_KILL_E,
	PVPE_KILL_L,
	PVPE_GODMONKILL,
	PVPE_ENTRY,
	PVPE_WIN,
	PVPE_DEFEND,	
	PVPE_COUNT,
	PVPE_BUYITEM
};

typedef enum PVP_STATUS
{
	PVPS_NONE = 0,
	PVPS_NORMAL,
	PVPS_LOCAL,
	PVPS_WAR
};

typedef enum TWIN_TYPE
{
	WIN_NONE = 0,
	WIN_TIME,
	WIN_POWER,
	WIN_NOWAR
} *LPWIN_TYPE;

typedef enum TCAMP_TYPE
{
	CAMP_NONE = 0,
	CAMP_DEFEND,
	CAMP_ATTACK,
	CAMP_COUNT
} *LPCAMP_TYPE;

typedef enum TPROTECTED_TYPE
{
	PROTECTED_NONE = 0,
	PROTECTED_CHAT = 1,
	PROTECTED_INVITE = 2,
	PROTECTED_DEAL = 4,
	PROTECTED_DUEL = 8
} *LPPROTECTED_TYPE;

typedef enum ITEMEXTENDEDVALUE_TYPE
{
	IEV_ELD = 0,	//착용레벨다운값
	IEV_WRAP,		//밀납 여부
	IEV_COLOR,
	IEV_GUILD,
	IEV_4,
	IEV_5
};
 
typedef enum EVENT_TYPE
{
	EVENT_EXPADD = 1,		// 경험치 증가
	EVENT_CASHSALE,			// 캐쉬아이템 할인
	EVENT_ITEMDROP,			// 아이템 드롭률 향상
	EVENT_ITEMMAGICDROP,	// 매직 아이템 드롭률 향상
	EVENT_REFINE,			// 제련 확률 향상
	EVENT_TRANS,			// 매직 전이 확률 향상
	EVENT_ITEMUPGRADE,		// 아이템 업그레이드 확률 향상
	EVENT_MAGICUPGRADE,		// 제작 확률 향상
	EVENT_RAREMAGICUPGRADE, // 희귀 제작 확률 향상
	EVENT_GAMBLEOPTION,		// 봉인 해제 확률 향상
	EVENT_MONEYDROP,		// Money Drop 양 
	EVENT_MONSPAWN,			// 몬스터 스폰
	EVENT_MONREGEN,			// 몬스터 리젠
	EVENT_LOTTERY,			// 아이템 추첨		
	EVENT_GIFTTIME,			// 특정시간 접속자 아이템 배포
	EVENT_COUNT
} *LPEVENT_TYPE;


typedef enum AUCTIONREG_RESULT
{
	AR_SUCCESS = 0,
	AR_FAIL,
	AR_NPCNOTFOUND,
	AR_INVALIDCHAR,	
	AR_INVALIDPRICE, // 즉구 < 시작가
	AR_INVALIDSTARTPRICE,
	AR_ITEMNOTFOUND, //아이템 없음
	AR_INVALIDITEM,	 //경매 불가능 아이템
	AR_INVALIDAUCTION,
	AR_NEEDMONEY,
	AR_MAXPOST,
	AR_CHANNEL,
	AR_COUNT
} *LPAUCTIONREG_RESULT;

typedef enum AUCTIONLIST_RESULT
{
	ALR_SUCCESS = 0,
	ALR_FAIL,
	ALR_NPCNOTFOUND,
	ALR_NOLIST,
	ALR_NOPAGE,
	ALR_CHANNEL,
	ALR_COUNT
} *LPAUCTIONLIST_RESULT;

typedef enum AUCTIONBID_RESULT
{
	ABR_SUCCESS = 0,
	ABR_FAIL,
	ABR_NPCNOTFOUND,
	ABR_AUCTIONNOTFOUND,
	ABR_SELF,
	ABR_LOWPRICE,
	ABR_NEEDMONEY,
	ABR_COUNTERROR,
	ABR_DUPLICATE,
	ABR_INVALIDCHAR,
	ABR_MAXPOST,
	ABR_LIMITEDDATE,
	ABR_CHANNEL,
	ABR_COUNT
} *LPAUCTIONBID_RESULT;

typedef enum AUCTIONALIGN_KIND
{
	AAK_AUCTIONIDASC = 0,
	AAK_AUCTIONIDDESC,	
	AAK_ENDTIMEASC,
	AAK_ENDTIMEDESC,
	AAK_REMAINTIMEASC,
	AAK_REMAINTIMEDESC,
	AAK_BIDPRICEASC,
	AAK_BIDPRICEDESC,
	AAK_DIRECTPRICEASC,
	AAK_DIRECTPRICEDESC,
	AAK_BIDCOUNTASC,
	AAK_BIDCOUNTDESC,
	AAK_CLASSASC,
	AAK_CLASSDESC,
	AAK_SELLERNAMEASC,
	AAK_SELLERNAMEDESC,
	AAK_REGASC ,
	AAK_REGDESC,
	AAK_WEARLEVELASC,
	AAK_WEARLEVELDESC,
	AAK_ITEMLEVELASC,
	AAK_ITEMLEVELDESC,
	AAK_COUNT
} *LPAUCTIONALIGN_KIND;

typedef enum COUNTRY_KIND
{
	COUNTRY_DEFUGEL = 0,
	COUNTRY_CRAXION,
	COUNTRY_BROA,
	COUNTRY_COUNT
} *LPCOUNTRY_KIND;
typedef enum TOURNAMENT_STEP
{
	TNMTSTEP_READY = 0,
	TNMTSTEP_1st,
	TNMTSTEP_NORMAL,
	TNMTSTEP_PARTY,
	TNMTSTEP_MATCH,
	TNMTSTEP_ENTER,
	TNMTSTEP_QFINAL,
	TNMTSTEP_QFEND,
	TNMTSTEP_SFENTER,
	TNMTSTEP_SFINAL,
	TNMTSTEP_SFEND,
	TNMTSTEP_FENTER,
	TNMTSTEP_FINAL,
	TNMTSTEP_END,
	TNMTSTEP_COUNT
};

typedef enum TOURNAMENT_STEP_STATUS
{
	STEPSTATUS_NONE = 0,
	STEPSTATUS_START,
	STEPSTATUS_END
};

typedef enum TOURNAMENT_ENTRY_TYPE
{
	ENTRY_PARTY = 1,
	ENTRY_PRIVATE
};

typedef enum TOURNAMENT_SEAT
{
	SEAT_S = 0,
	SEAT_A,
	SEAT_B,
	SEAT_COUNT
};

typedef enum TOURNAMENT_WIN
{
	TNMTWIN_NONE = 0,
	TNMTWIN_WIN,
	TNMTWIN_LOSE,
};

typedef enum TMATCH_TYPE
{
	MATCH_QFINAL = 0,
	MATCH_SFINAL,
	MATCH_FINAL,
	MATCH_COUNT
};

typedef enum FAMERANK_TYPE
{
	FRT_HERO = 0,
	FRT_GOD,
	FRT_GODDESS,
	FRT_1ST,
	FRT_COUNT
};

typedef enum TOURNAMENT_EVENT_TYPE
{
	TET_NONE = 0,
	TET_LIST,
	TET_SCHEDULEADD,
	TET_SCHEDULEDEL,
	TET_ENTRYADD,
	TET_ENTRYDEL,
	TET_PLAYERADD,
	TET_PLAYERDEL,
	TET_PLAYEREND
};

typedef enum HELPMESSAGE_TYPE
{
	HELPMESSAGE_NONE = 0,
	HELPMESSAGE_TUTORIAL,
	HELPMESSAGE_NORMAL,
	HELPMESSAGE_EVENT
};

typedef enum RPSGAME_TYPE
{
	RPSGAME_NONE = 0,
	RPSGAME_1= 1,
	RPSGAME_10 = 10,
	RPSGAME_100 = 100,
	RPSGAME_COUNT
};

typedef enum RPSCARD_TYPE
{
	RPSCARD_ROCK = 0,
	RPSCARD_PAPER,
	RPSCARD_SCISSORS,
	RPSCARD_COUNT
};

typedef enum CMGIFT_TYPE
{
	CGT_NONE = 0,
	CGT_ITEM,
	CGT_MAGICITEM,
	CGT_MONEY,
	CGT_MERIT,
	CGT_EXP
};

typedef enum CMGIFTUPDATE_TYPE
{
	CGU_NONE = 0,
	CGU_DEL,
	CGU_ADD,
	CGU_UPDATE
};